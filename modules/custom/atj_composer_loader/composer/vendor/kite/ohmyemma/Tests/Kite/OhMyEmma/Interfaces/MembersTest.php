<?php

namespace Kite\OhMyEmma\Interfaces;

use mocks\RequestMock as RequestMock;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-20 at 20:39:25.
 */
class MembersTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Members
     */
    protected $members;
    protected $request;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->request = new RequestMock();
        $this->assertEquals('', $this->request->baseURL);
 
        $this->members = new Members($this->request);
        $this->assertObjectHasAttribute('_request', $this->members);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Kite\OhMyEmma\Interfaces\Members::getMembers
     */
    public function testGetMembers()
    {
        $this->request = new RequestMock();
        $this->members = new Members($this->request);

        // Test getting all members
        $this->assertEquals('/members', $this->members->getMembers());

        // Testing getting member by email
        $this->assertEquals(
            '/members/email/test@you.com',
            $this->members->getMembers('test@you.com')
        );

        // Test getting member even optout
        $this->assertEquals(
            '/members/1122/optout',
            $this->members->getMembers('1122', true)
        );

        // Testing getting members with filters
        $params = array(
            'yellow'=>'true',
            'blue'=>'false'
        );
        $this->assertEquals(
            '/members/1122?yellow=true&blue=false',
            $this->members->getMembers('1122', false, $params)
        );

    }

    /**
     * @covers Kite\OhMyEmma\Interfaces\Members::updateAddMember
     */
    public function testUpdateAddMember()
    {
        $this->request = new RequestMock();
        $this->members = new Members($this->request);

        // Testing adding a single members 
        $this->assertEquals(
            '/members/add?name=yo', 
            $this->members->updateAddMember(
                array('name' => 'yo')
            )
        );

        // Testing adding a batch of members
        $this->assertEquals(
            '/members?members=yo', 
            $this->members->updateAddMember(array('members' => 'yo'))
        );

        // Testing opting out a single member
        $this->assertEquals(
            '/members/email/optout/yo?email=yo', 
            $this->members->updateAddMember(array('email' => 'yo'), true)
        );
    }

    /**
     * @covers Kite\OhMyEmma\Interfaces\Members::removeMember
     */
    public function testRemoveMember()
    {
        $this->request = new RequestMock();
        $this->members = new Members($this->request);

        // Testing deleting a group of members 
        $this->assertEquals(
            '/members/delete?name=yo', 
            $this->members->removeMember(
                array('name' => 'yo')
            )
        );

        // Testing deleting a single members 
        $this->assertEquals(
            '/members/yo@yo.com', 
            $this->members->removeMember('yo@yo.com')
        );
    }

    /**
     * @covers Kite\OhMyEmma\Interfaces\Members::changeStatus
     */
    public function testChangeStatus()
    {
        $this->request = new RequestMock();
        $this->members = new Members($this->request);

        // Testing deleting a group of members 
        $this->assertEquals(
            '/members/status?name=yo', 
            $this->members->changeStatus(
                array('name' => 'yo')
            )
        );
    }

    /**
     * @covers Kite\OhMyEmma\Interfaces\Members::getGroups
     */
    public function testGetGroups()
    {
        $this->request = new RequestMock();
        $this->members = new Members($this->request);

        // Testing deleting a group of members 
        $this->assertEquals(
            '/members/201/groups',
            $this->members->getGroups('201')
        );
    }

    /**
     * @covers Kite\OhMyEmma\Interfaces\Members::addRemoveGroupMembers
     */
    public function testAddRemoveGroupMembers()
    {
        $this->request = new RequestMock();
        $this->members = new Members($this->request);

        // Testing add members to group
        $this->assertEquals(
            '/members/201/groups?groups=non',
            $this->members->addRemoveGroupMembers(
                '201', 
                array('groups' => 'non')
            )
        );
        // Testing removing members from group
        $this->assertEquals(
            '/members/201/groups/remove?groups=remove',
            $this->members->addRemoveGroupMembers(
                '201', 
                array('groups' => 'remove'),
                true
            )
        );
    }

    /**
     * @covers Kite\OhMyEmma\Interfaces\Members::removeAllMembers
     */
    public function testRemoveAllMembers()
    {
        $this->request = new RequestMock();
        $this->members = new Members($this->request);

        // Testing add members to group
        $this->assertEquals(
            '/members?member_status_id=e',
            $this->members->removeAllMembers('e')
        );
    }

    /**
     * @covers Kite\OhMyEmma\Interfaces\Members::removeFromGroup
     */
    public function testRemoveFromGroup()
    {
        $this->request = new RequestMock();
        $this->members = new Members($this->request);

        // Testing removing member from group
        $this->assertEquals(
            '/members/group/groups',
            $this->members->removeFromGroup('group')
        );
        // Testing removing batch members from group
        $this->assertEquals(
            '/members/groups/remove?member=batch',
            $this->members->removeFromGroup(array('member' => 'batch'))
        );

    }

    /**
     * @covers Kite\OhMyEmma\Interfaces\Members::getMemberMailingHistory
     */
    public function testGetMemberMailingHistory()
    {
        $this->request = new RequestMock();
        $this->members = new Members($this->request);

        // Testing removing member from group
        $this->assertEquals(
            '/members/memberId/mailings',
            $this->members->getMemberMailingHistory('memberId')
        );
    }

    /**
     * @covers Kite\OhMyEmma\Interfaces\Members::getImportInformation
     */
    public function testGetImportInformation()
    {
        $this->request = new RequestMock();
        $this->members = new Members($this->request);

        // Testing testing getting import information from id
        $this->assertEquals(
            '/members/imports/importId',
            $this->members->getImportInformation('importId')
        );
        // Testing testing getting import information from id and
        // show members only
        $this->assertEquals(
            '/members/imports/importId/members',
            $this->members->getImportInformation('importId', true)
        );
        // Get all imports
        $this->assertEquals(
            '/members/imports',
            $this->members->getImportInformation()
        );
    }

    /**
     * @covers Kite\OhMyEmma\Interfaces\Members::deleteImport
     */
    public function testDeleteImport()
    {
        $this->request = new RequestMock();
        $this->members = new Members($this->request);

        $this->assertEquals(
            '/members/imports/importId/delete',
            $this->members->deleteImport('importId')
        );
    }

    /**
     * @covers Kite\OhMyEmma\Interfaces\Members::groupStatuses
     */
    public function testGroupStatuses()
    {
        $this->request = new RequestMock();
        $this->members = new Members($this->request);

        $this->assertEquals(
            '/members/imports/importId/delete',
            $this->members->groupStatuses('importId')
        );
    }

    /**
     * @covers Kite\OhMyEmma\Interfaces\Members::convertStatus
     */
    public function testConvertStatus()
    {
        $this->request = new RequestMock();
        $this->members = new Members($this->request);

        // Testing without group limits
        $this->assertEquals(
            '/members/status/from/to/to',
            $this->members->convertStatus('from', 'to')
        );
        // Testing with group limits
        $this->assertEquals(
            '/members/status/from/to/to?limitgroup=true',
            $this->members->convertStatus(
                'from', 
                'to', 
                array('limitgroup' => 'true')
            )
        );
    }
}
