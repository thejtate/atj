<?php
namespace Kite\OhMyEmma\Interfaces;

use mocks\RequestMock as RequestMock;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-24 at 21:17:16.
 */
class GroupsTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Groups
     */
    protected $groups;
    protected $request;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->request = new RequestMock();
        $this->assertEquals('', $this->request->baseURL);

        $this->groups = new Groups($this->request);
        $this->assertObjectHasAttribute('_request', $this->groups);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Kite\OhMyEmma\Interfaces\Groups::getGroups
     */
    public function testGetGroups()
    {
        $this->request = new RequestMock();
        $this->groups = new Groups($this->request);

        // Testing get all groups 
        $this->assertEquals(
            '/groups', 
            $this->groups->getGroups()
        );
        // Testing get individual group
        $this->assertEquals(
            '/groups/groupId', 
            $this->groups->getGroups('groupId')
        );
        // Testing get individual group with members
        $this->assertEquals(
            '/groups/groupId/members', 
            $this->groups->getGroups('groupId', true)
        );
    }

    /**
     * @covers Kite\OhMyEmma\Interfaces\Groups::createUpdateGroup
     */
    public function testCreateUpdateGroup()
    {
        $this->request = new RequestMock();
        $this->groups = new Groups($this->request);

        $groupData = array(
            "data1" => "200",
            "data2" => "300"
        );
        // Testing updating groups
        $this->assertEquals(
            '/groups?data1=200&data2=300', 
            $this->groups->createUpdateGroup($groupData)
        );
        // Testing updating group id
        $this->assertEquals(
            '/groups/groupId?data1=200&data2=300', 
            $this->groups->createUpdateGroup($groupData, 'groupId')
        );
    }

    /**
     * @covers Kite\OhMyEmma\Interfaces\Groups::deleteGroup
     */
    public function testDeleteGroup()
    {
        $this->request = new RequestMock();
        $this->groups = new Groups($this->request);

        // Testing delete groups
        $this->assertEquals(
            '/groups/groupId',
            $this->groups->deleteGroup('groupId')
        );
    }

    /**
     * @covers Kite\OhMyEmma\Interfaces\Groups::addRemoveMembers
     */
    public function testAddRemoveMembers()
    {
        $this->request = new RequestMock();
        $this->groups = new Groups($this->request);

        $groupData = array(
            "data1" => "200",
            "data2" => "300"
        );
        // Testing add members
        $this->assertEquals(
            '/groups/groupId/members?data1=200&data2=300',
            $this->groups->addRemoveMembers('groupId', $groupData)
        );
        // Testing remove members
        $this->assertEquals(
            '/groups/groupId/members/remove?data1=200&data2=300',
            $this->groups->addRemoveMembers('groupId', $groupData, true)
        );
    }

    /**
     * @covers Kite\OhMyEmma\Interfaces\Groups::removeAllMembers
     */
    public function testRemoveAllMembers()
    {
        $this->request = new RequestMock();
        $this->groups = new Groups($this->request);

        // Testing remove memebers from group
        $this->assertEquals(
            '/groups/groupId/members',
            $this->groups->removeAllMembers('groupId')
        );
        // Testing remove all memebers from group by status
        $this->assertEquals(
            '/groups/groupId/members?member_status_id=e',
            $this->groups->removeAllMembers('groupId', 'e')
        );
        // Testing remove all memebers 
        $this->assertEquals(
            '/groups/groupId/members/remove',
            $this->groups->removeAllMembers('groupId', '', true)
        );
        // Testing remove all memebers by status
        $this->assertEquals(
            '/groups/groupId/members/remove?member_status_id=e',
            $this->groups->removeAllMembers('groupId', 'e', true)
        );
    }

    /**
     * @covers Kite\OhMyEmma\Interfaces\Groups::copyGroupMembers
     */
    public function testCopyGroupMembers()
    {
        $this->request = new RequestMock();
        $this->groups = new Groups($this->request);

        $statusData = array(
            "status" => "e"
        );
        // Testing remove memebers from group
        $this->assertEquals(
            '/groups/fromId/toId/members/copy?status=e',
            $this->groups->copyGroupMembers('fromId', 'toId', $statusData)
        );
    }
}
