<?php
namespace Kite\OhMyEmma\Interfaces;

use mocks\RequestMock as RequestMock;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-24 at 21:32:33.
 */
class TriggersTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Triggers
     */
    protected $triggers;
    protected $request;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->request = new RequestMock();
        $this->assertEquals('', $this->request->baseURL);

        $this->triggers = new Searches($this->request);
        $this->assertObjectHasAttribute('_request', $this->triggers);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Kite\OhMyEmma\Interfaces\Triggers::getTriggers
     */
    public function testGetTriggers()
    {
        $this->request = new RequestMock();
        $this->triggers = new Triggers($this->request);

        // Testing get triggers with no filters
        $this->assertEquals(
            '/triggers',
            $this->triggers->getTriggers()
        );
        // Testing getting specific trigger
        $this->assertEquals(
            '/triggers/triggerId',
            $this->triggers->getTriggers('triggerId')
        );
        // Testing getting specific trigger with mailings
        $this->assertEquals(
            '/triggers/triggerId/mailings',
            $this->triggers->getTriggers('triggerId', true)
        );
    }

    /**
     * @covers Kite\OhMyEmma\Interfaces\Triggers::addUpdateTrigger
     */
    public function testAddUpdateTrigger()
    {
        $this->request = new RequestMock();
        $this->triggers = new Triggers($this->request);

        $triggerData = array(
            "trigger" => "data"
        );
        // Testing adding a trigger
        $this->assertEquals(
            '/triggers?trigger=data',
            $this->triggers->addUpdateTrigger($triggerData)
        );
        // Testing updating a trigger
        $this->assertEquals(
            '/triggers/triggerId?trigger=data',
            $this->triggers->addUpdateTrigger($triggerData, 'triggerId')
        );
    }

    /**
     * @covers Kite\OhMyEmma\Interfaces\Triggers::removeTrigger
     */
    public function testRemoveTrigger()
    {
        $this->request = new RequestMock();
        $this->triggers = new Triggers($this->request);

        // Testing adding a trigger
        $this->assertEquals(
            '/triggers/triggerId',
            $this->triggers->removeTrigger('triggerId')
        );
    }
}
