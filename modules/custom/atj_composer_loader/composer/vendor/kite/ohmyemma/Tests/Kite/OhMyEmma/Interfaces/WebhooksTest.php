<?php
namespace Kite\OhMyEmma\Interfaces;

use mocks\RequestMock as RequestMock;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-24 at 21:33:07.
 */
class WebhooksTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Webhooks
     */
    protected $webhooks;
    protected $request;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->request = new RequestMock();
        $this->assertEquals('', $this->request->baseURL);

        $this->webhooks = new Webhooks($this->request);
        $this->assertObjectHasAttribute('_request', $this->webhooks);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Kite\OhMyEmma\Interfaces\Webhooks::getWebhooks
     * @todo   Implement testGetWebhooks().
     */
    public function testGetWebhooks()
    {
        $this->request = new RequestMock();
        $this->webhooks = new Webhooks($this->request);

        // Testing get webhooks with no filters
        $this->assertEquals(
            '/webhooks',
            $this->webhooks->getWebhooks()
        );
        // Testing get specific webhook
        $this->assertEquals(
            '/webhooks/webhookId',
            $this->webhooks->getWebhooks('webhookId')
        );
        // Testing get webhook events
        $this->assertEquals(
            '/webhooks/events',
            $this->webhooks->getWebhooks('webhookId', true)
        );
    }

    /**
     * @covers Kite\OhMyEmma\Interfaces\Webhooks::createUpdateWebhook
     */
    public function testCreateUpdateWebhook()
    {
        $this->request = new RequestMock();
        $this->webhooks = new Webhooks($this->request);

        $webhookData = array(
            "webhook1" => "a",
            "webhook2" => "b"
        );
        // Testing creating webhook
        $this->assertEquals(
            '/webhooks?webhook1=a&webhook2=b',
            $this->webhooks->createUpdateWebhook($webhookData)
        );
        // Testing update webhook
        $this->assertEquals(
            '/webhooks/webhookId?webhook1=a&webhook2=b',
            $this->webhooks->createUpdateWebhook($webhookData, 'webhookId')
        );
    }

    /**
     * @covers Kite\OhMyEmma\Interfaces\Webhooks::removeWebhook
     */
    public function testRemoveWebhook()
    {
        $this->request = new RequestMock();
        $this->webhooks = new Webhooks($this->request);

        // Testing creating webhook
        $this->assertEquals(
            '/webhooks/webhookId',
            $this->webhooks->removeWebhook('webhookId')
        );
    }
}
